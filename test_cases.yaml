metadata:
  schema_description: "Table containing indoor plant growing environment measurements"
  difficulty_levels:
    easy: "Basic SELECT queries with simple WHERE clauses"
    medium: "Queries with multiple conditions, basic aggregations, or date/time operations"
    hard: "Complex queries with subqueries, multiple aggregations, or complex conditions"

test_cases:
  # EASY DIFFICULTY
  - question: "Show all readings where the carbon dioxide level was greater than 800"
    expected_query: "SELECT * FROM snifferdata.readings WHERE carbon_dioxide > 800;"
    difficulty: "easy"
    category: "basic_filtering"

  - question: "Find all readings where the temperature is above 25 degrees"
    expected_query: "SELECT * FROM snifferdata.readings WHERE temperature > 25;"
    difficulty: "easy"
    category: "basic_filtering"

  - question: "List all readings where the lights were off"
    expected_query: "SELECT * FROM snifferdata.readings WHERE light_on = 0;"
    difficulty: "easy"
    category: "basic_filtering"

  - question: "Show the 5 highest humidity readings"
    expected_query: "SELECT * FROM snifferdata.readings ORDER BY humidity DESC LIMIT 5;"
    difficulty: "easy"
    category: "basic_sorting"

  # MEDIUM DIFFICULTY
  - question: "What was the average temperature and humidity for each day last week?"
    expected_query: "SELECT DATE(timestamp), AVG(temperature) as avg_temp, AVG(humidity) as avg_humidity FROM snifferdata.readings GROUP BY DATE(timestamp);"
    difficulty: "medium"
    category: "aggregation_with_grouping"

  - question: "Find times when CO2 was above 1000 and humidity was below 40%"
    expected_query: "SELECT * FROM snifferdata.readings WHERE carbon_dioxide > 1000 AND humidity < 40;"
    difficulty: "medium"
    category: "multiple_conditions"

  - question: "Calculate the average VPD during light-on periods for each day"
    expected_query: "SELECT DATE(timestamp), AVG(vpd) as avg_vpd FROM snifferdata.readings WHERE light_on = 1 GROUP BY DATE(timestamp);"
    difficulty: "medium"
    category: "conditional_aggregation"

  - question: "Show the daily minimum and maximum temperature"
    expected_query: "SELECT DATE(timestamp), MIN(temperature) as min_temp, MAX(temperature) as max_temp FROM snifferdata.readings GROUP BY DATE(timestamp);"
    difficulty: "medium"
    category: "multiple_aggregations"

  - question: "What was the temperature around 2 PM yesterday?"
    expected_query: >
      SELECT timestamp, temperature
      FROM snifferdata.readings
      WHERE DATE(timestamp) = DATE('now', '-1 day')
      AND TIME(timestamp) BETWEEN '13:45:00' AND '14:15:00'
      ORDER BY timestamp;
    difficulty: "medium"
    category: "time_based_query"

  - question: "Show me all readings between 2 PM and 3 PM today"
    expected_query: >
      SELECT *
      FROM snifferdata.readings
      WHERE DATE(timestamp) = DATE('now')
      AND TIME(timestamp) BETWEEN '14:00:00' AND '15:00:00'
      ORDER BY timestamp;
    difficulty: "medium"
    category: "time_based_query"

  - question: "What was the average CO2 level during the afternoon (12 PM to 5 PM) last week?"
    expected_query: >
      SELECT DATE(timestamp), AVG(carbon_dioxide) as avg_co2
      FROM snifferdata.readings
      WHERE DATE(timestamp) BETWEEN DATE('now', '-7 days') AND DATE('now')
      AND TIME(timestamp) BETWEEN '12:00:00' AND '17:00:00'
      GROUP BY DATE(timestamp);
    difficulty: "medium"
    category: "time_based_aggregation"

  - question: "What was the VPD during the first hour after lights turned on today?"
    expected_query: >
      WITH light_start AS (
        SELECT MIN(timestamp) as start_time
        FROM snifferdata.readings
        WHERE DATE(timestamp) = DATE('now')
        AND light_on = 1
      )
      SELECT timestamp, vpd
      FROM snifferdata.readings
      WHERE timestamp BETWEEN (SELECT start_time FROM light_start)
        AND datetime((SELECT start_time FROM light_start), '+1 hour')
      ORDER BY timestamp;
    difficulty: "medium"
    category: "time_based_light_cycle"

  - question: "Show me the temperature trend for the past 3 hours"
    expected_query: >
      SELECT 
        strftime('%H:%M', timestamp) as time,
        temperature,
        AVG(temperature) OVER (
          ORDER BY timestamp
          ROWS BETWEEN 5 PRECEDING AND 5 FOLLOWING
        ) as moving_avg_temp
      FROM snifferdata.readings
      WHERE timestamp >= datetime('now', '-3 hours')
      ORDER BY timestamp;
    difficulty: "medium"
    category: "time_based_trending"

  # HARD DIFFICULTY
  - question: "Find days where the average CO2 during light-on periods was 20% higher than during light-off periods"
    expected_query: >
      WITH light_on_avg AS (
        SELECT DATE(timestamp) as date, AVG(carbon_dioxide) as on_avg 
        FROM snifferdata.readings 
        WHERE light_on = 1 
        GROUP BY DATE(timestamp)
      ),
      light_off_avg AS (
        SELECT DATE(timestamp) as date, AVG(carbon_dioxide) as off_avg 
        FROM snifferdata.readings 
        WHERE light_on = 0 
        GROUP BY DATE(timestamp)
      )
      SELECT light_on_avg.date 
      FROM light_on_avg 
      JOIN light_off_avg ON light_on_avg.date = light_off_avg.date 
      WHERE light_on_avg.on_avg > light_off_avg.off_avg * 1.2;
    difficulty: "hard"
    category: "complex_comparison"

  - question: "Calculate the hourly VPD stability (max - min) during light-on periods"
    expected_query: >
      SELECT 
        DATE(timestamp),
        STRFTIME('%H', timestamp) as hour,
        MAX(vpd) - MIN(vpd) as vpd_stability
      FROM snifferdata.readings 
      WHERE light_on = 1
      GROUP BY DATE(timestamp), STRFTIME('%H', timestamp)
      ORDER BY vpd_stability DESC;
    difficulty: "hard"
    category: "advanced_aggregation"

  - question: "Find periods of 3 or more consecutive readings where CO2 was above critical level (1200) during light-on time"
    expected_query: >
      WITH numbered AS (
        SELECT 
          *,
          ROW_NUMBER() OVER (ORDER BY timestamp) as rn
        FROM snifferdata.readings
        WHERE carbon_dioxide > 1200 AND light_on = 1
      )
      SELECT timestamp, carbon_dioxide
      FROM numbered
      WHERE EXISTS (
        SELECT 1 
        FROM numbered n2 
        WHERE n2.rn BETWEEN numbered.rn-2 AND numbered.rn+2
        GROUP BY n2.rn
        HAVING COUNT(*) >= 3
      );
    difficulty: "hard"
    category: "window_functions"

  - question: "Calculate the correlation between temperature and VPD during different light cycles"
    expected_query: >
      SELECT 
        light_on,
        (AVG(temperature * vpd) - AVG(temperature) * AVG(vpd)) / 
        (SQRT(AVG(temperature * temperature) - AVG(temperature) * AVG(temperature)) * 
         SQRT(AVG(vpd * vpd) - AVG(vpd) * AVG(vpd))) as correlation
      FROM snifferdata.readings
      GROUP BY light_on;
    difficulty: "hard"
    category: "statistical_analysis"

  - question: "Compare morning (6 AM - 12 PM) vs evening (6 PM - 12 AM) temperature averages for the past week"
    expected_query: >
      WITH morning_temps AS (
        SELECT DATE(timestamp) as date, AVG(temperature) as morning_avg
        FROM snifferdata.readings
        WHERE DATE(timestamp) BETWEEN DATE('now', '-7 days') AND DATE('now')
        AND TIME(timestamp) BETWEEN '06:00:00' AND '12:00:00'
        GROUP BY DATE(timestamp)
      ),
      evening_temps AS (
        SELECT DATE(timestamp) as date, AVG(temperature) as evening_avg
        FROM snifferdata.readings
        WHERE DATE(timestamp) BETWEEN DATE('now', '-7 days') AND DATE('now')
        AND TIME(timestamp) BETWEEN '18:00:00' AND '24:00:00'
        GROUP BY DATE(timestamp)
      )
      SELECT 
        m.date,
        m.morning_avg,
        e.evening_avg,
        (e.evening_avg - m.morning_avg) as temp_difference
      FROM morning_temps m
      JOIN evening_temps e ON m.date = e.date
      ORDER BY m.date;
    difficulty: "hard"
    category: "complex_time_comparison"

  - question: "Find any unusual CO2 spikes (more than 2 standard deviations above the daily average) in the past week"
    expected_query: >
      WITH daily_stats AS (
        SELECT 
          DATE(timestamp) as date,
          AVG(carbon_dioxide) as daily_avg,
          SQRT(AVG(carbon_dioxide * carbon_dioxide) - AVG(carbon_dioxide) * AVG(carbon_dioxide)) as daily_stddev
        FROM snifferdata.readings
        WHERE DATE(timestamp) >= DATE('now', '-7 days')
        GROUP BY DATE(timestamp)
      )
      SELECT 
        r.timestamp,
        r.carbon_dioxide,
        s.daily_avg,
        s.daily_stddev,
        (r.carbon_dioxide - s.daily_avg) / s.daily_stddev as deviation
      FROM snifferdata.readings r
      JOIN daily_stats s ON DATE(r.timestamp) = s.date
      WHERE (r.carbon_dioxide - s.daily_avg) > (2 * s.daily_stddev)
      ORDER BY deviation DESC;
    difficulty: "hard"
    category: "statistical_anomaly"

  - question: "What's the typical temperature swing between day and night for each day last week?"
    expected_query: >
      WITH day_temps AS (
        SELECT 
          DATE(timestamp) as date,
          AVG(temperature) as day_temp
        FROM snifferdata.readings
        WHERE DATE(timestamp) >= DATE('now', '-7 days')
        AND light_on = 1
        GROUP BY DATE(timestamp)
      ),
      night_temps AS (
        SELECT 
          DATE(timestamp) as date,
          AVG(temperature) as night_temp
        FROM snifferdata.readings
        WHERE DATE(timestamp) >= DATE('now', '-7 days')
        AND light_on = 0
        GROUP BY DATE(timestamp)
      )
      SELECT 
        d.date,
        d.day_temp,
        n.night_temp,
        (d.day_temp - n.night_temp) as temp_swing,
        ABS(d.day_temp - n.night_temp) as swing_magnitude
      FROM day_temps d
      JOIN night_temps n ON d.date = n.date
      ORDER BY swing_magnitude DESC;
    difficulty: "hard"
    category: "environmental_analysis"

  - question: "Find periods where VPD was outside optimal range (0.8-1.2) for more than 30 minutes during lights-on"
    expected_query: >
      WITH ranges AS (
        SELECT 
          timestamp,
          vpd,
          light_on,
          SUM(CASE 
            WHEN vpd BETWEEN 0.8 AND 1.2 THEN 0 
            ELSE 1 
          END) OVER (
            ORDER BY timestamp 
            ROWS BETWEEN 6 PRECEDING AND CURRENT ROW
          ) as out_of_range_count
        FROM snifferdata.readings
        WHERE light_on = 1
      )
      SELECT 
        timestamp,
        vpd,
        out_of_range_count
      FROM ranges
      WHERE out_of_range_count >= 6
      ORDER BY timestamp;
    difficulty: "hard"
    category: "environmental_monitoring"

  - question: "What's the correlation between CO2 levels and VPD during different times of day?"
    expected_query: >
      WITH time_periods AS (
        SELECT *,
        CASE 
          WHEN TIME(timestamp) BETWEEN '06:00:00' AND '12:00:00' THEN 'morning'
          WHEN TIME(timestamp) BETWEEN '12:00:01' AND '18:00:00' THEN 'afternoon'
          WHEN TIME(timestamp) BETWEEN '18:00:01' AND '23:59:59' THEN 'evening'
          ELSE 'night'
        END as day_period
        FROM snifferdata.readings
      )
      SELECT 
        day_period,
        COUNT(*) as readings,
        (AVG(carbon_dioxide * vpd) - AVG(carbon_dioxide) * AVG(vpd)) / 
        (SQRT(AVG(carbon_dioxide * carbon_dioxide) - AVG(carbon_dioxide) * AVG(carbon_dioxide)) * 
         SQRT(AVG(vpd * vpd) - AVG(vpd) * AVG(vpd))) as correlation
      FROM time_periods
      GROUP BY day_period
      ORDER BY 
        CASE day_period 
          WHEN 'morning' THEN 1 
          WHEN 'afternoon' THEN 2 
          WHEN 'evening' THEN 3 
          ELSE 4 
        END;
    difficulty: "hard"
    category: "advanced_correlation"

  - question: "Show me the longest streak of consecutive days where temperature stayed within optimal range (20-25°C) during lights-on"
    expected_query: >
      WITH daily_compliance AS (
        SELECT 
          DATE(timestamp) as date,
          CASE WHEN 
            MIN(temperature) >= 20 AND MAX(temperature) <= 25 
          THEN 1 ELSE 0 END as within_range
        FROM snifferdata.readings
        WHERE light_on = 1
        GROUP BY DATE(timestamp)
      ),
      streaks AS (
        SELECT 
          date,
          within_range,
          SUM(CASE WHEN within_range = 1 THEN 1 ELSE 0 END) OVER (
            ORDER BY date
            ROWS UNBOUNDED PRECEDING
          ) as streak_group
        FROM daily_compliance
      )
      SELECT 
        MIN(date) as streak_start,
        MAX(date) as streak_end,
        COUNT(*) as streak_length
      FROM streaks
      WHERE within_range = 1
      GROUP BY streak_group
      HAVING streak_length > 1
      ORDER BY streak_length DESC
      LIMIT 1;
    difficulty: "hard"
    category: "streak_analysis" 